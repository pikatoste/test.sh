name: CI

on:
  push:
    branches:
      #- master
  pull_request:

jobs:

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Dismiss current coverage badge
        if: github.event_name == 'push'
        run: |
          tools/generate-coverage-badge.sh >/tmp/coverage.svg
          tools/upload-coverage-badge.sh /tmp/coverage.svg
      - uses: actions/checkout@v2
        if: github.event_name == 'push'
      - name: Build
        run: make
      - name: Run tests
        run: |
          make check | tee /tmp/testmain.out
          cp /tmp/testmain.out runtest/test/testout/.main
      - name: Upload test output artifact
        uses: actions/upload-artifact@v1
        with:
          name: testout
          path: runtest/test/testout
      - name: Install requirements for coverage
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt install ruby
          sudo gem install bashcov
      - name: Generate and fix code coverage report
        run: |
          make coverage
          sed -i -e "s#type='text/css'>#type='text/css'/>#" runtest/coverage/index.html
      - name: Upload code coverage report artifact
        uses: actions/upload-artifact@v1
        with:
          name: coverage
          path: runtest/coverage

  coverage_badge:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - name: Download coverage report artifact
        uses: actions/download-artifact@v1
        with:
          name: coverage
          path: runtest/coverage
      - name: Generate coverage badge from report
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt install xsltproc
          tools/generate-coverage-badge.sh >/tmp/coverage.svg
      - name: Upload coverage badge
        run: tools/upload-coverage-badge.sh /tmp/coverage.svg

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: make
      - name: Set version and tag
        run: |
          VERSION=$(tools/generate-version.sh)
          TAG=v${VERSION}
          TAG=${TAG/*SNAPSHOT*/latest}
          if [[ $TAG = latest ]]; then
            git tag -f latest
            git push --force origin latest
          else
            REF_TAG=${GITHUB_REF/refs\/tags\//}
            echo GITHUB_REF=$GITHUB_REF
            echo REF_TAG=$REF_TAG
            [[ $TAG == $REF_TAG ]] || TAG=
          fi
          echo "::set-env name=VERSION::$VERSION"
          echo "::set-env name=TAG::$TAG"
      - name: Save tools folder
        if: env.TAG != ''
        run: cp -a tools README.md /tmp
      - name: Create release
        if: env.TAG != ''
        run: tools/github-create-release.sh $TAG $VERSION ${{ secrets.WORKFLOW_TOKEN }}
      - name: Switch to gh-pages branch
        if: env.TAG != ''
        uses: actions/checkout@v2
        with:
          ref: gh-pages
          fetch-depth: 2
          token: ${{ secrets.WORKFLOW_TOKEN }}
      - name: Download coverage report artifact
        if: env.TAG != ''
        uses: actions/download-artifact@v1
        with:
          name: coverage
          path: releases/${{ env.TAG }}/buildinfo/coverage
      - name: Download test output artifact
        if: env.TAG != ''
        uses: actions/download-artifact@v1
        with:
          name: testout
          path: build/testout
      - name: Publish gh-pages
        if: env.TAG != ''
        run: |
          git config user.email "ci@nowhere.org"
          git config user.name "ci"
          LAST_COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')
          [[ $LAST_COMMIT_AUTHOR == ci ]] && git reset HEAD~1
          /tmp/tools/gh-pages-publish-release.sh
          git add .
          git commit -m "Update build info for tag $TAG"
          git push --force --set-upstream origin gh-pages
